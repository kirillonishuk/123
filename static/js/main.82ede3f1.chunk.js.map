{"version":3,"sources":["Message.jsx","socket.js","App.js","serviceWorker.js","index.js"],"names":["Message","createFile","file","Blob","_this","props","type","mime","lookup","name","split","URL","createObjectURL","renderButtons","buttons","map","button","id","react_default","a","createElement","className","key","onClick","event","sendMessage","text","toUpperCase","linkify","replace","renderTime","time","getHours","getMinutes","renderMessage","message","messageType","dangerouslySetInnerHTML","__html","image","target","rel","href","concat","config","urlHttp","filename","src","alt","download","byteLength","audio","controls","keyboard","classNames","message-box","this","buttons-box","outgoing","incoming","form","Component","cases","component-outgoing-message","wmsg","Date","component-ingoing-message","component-keyboard","component-outgoing-picture","component-ingoing-picture","component-outgoing-audio","component-outgoing-document","component-ingoing-document","default","socket","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatbox","scrollTop","scrollHeight","changeMessage","setState","value","answer","preventDefault","stopPropagation","state","botIsActive","bot","botId","user","userId","emit","chat","disabled","focus","startChat","loadImage","files","FileReader","length","reader","onload","result","readAsDataURL","alert","loadDoc","box","elem","src_Message_0","assign","renderInitButton","infoMessage","renderInput","blockerStyles","blocker-hide","blocker","onSubmit","htmlFor","accept","onChange","ref","placeholder","crypto","getRandomValues","Uint32Array","toString","getTime","isIdInPath","url","urlWs","io","path","transports","on","wmsgParser","console","log","_this2","window","location","pathname","slice","hash","prevProps","prevState","close","_this3","autoComplete","autoFocus","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82ede3f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Message.css';\nimport classNames from 'classnames';\nimport mime from 'mime-types';\nimport config from './config/config.json';\n\n\nclass Message extends Component {\n\n    createFile = () => {\n        const file = new Blob([this.props.file], { type: this.props.mime || mime.lookup(this.props.name.split('.')[1]) });\n\n        return URL.createObjectURL(file)\n    };\n\n    renderButtons = () => {\n        return this.props.buttons.map((button, id) =>\n            <div className=\"answer-button\" key={id} onClick={(event) => this.props.sendMessage(event, button.text)}>\n                {button.text.toUpperCase()}\n            </div>\n        )\n    };\n\n    linkify = (text) => {\n        // http://, https://, ftp://\n        const urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&@#\\/%?=~_|!:,.;]*[a-z0-9-+&@#\\/%=~_|]/gim;\n        // www. sans http:// or https://\n        const pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        // Email addresses\n        const emailAddressPattern = /[\\w.]+@[a-zA-Z_-]+?(?:\\.[a-zA-Z]{2,6})+/gim;\n\n        return text\n            .replace(urlPattern, '<a href=\"$&\" target=\"_blank\">$&</a>')\n            .replace(pseudoUrlPattern, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>')\n            .replace(emailAddressPattern, '<a href=\"mailto:$&\" target=\"_blank\">$&</a>');\n    }\n\n    renderTime = () => <div className=\"message-time\">{this.props.time.getHours() + ':' + this.props.time.getMinutes()}</div>\n\n    renderMessage = {\n        'message': (messageType) => <div className={messageType}>\n            <div dangerouslySetInnerHTML={{ __html: this.linkify(this.props.text) }}></div>\n            {this.renderTime()}\n        </div>,\n        'image': (messageType) => <div className={messageType}>\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${config.urlHttp[process.env.NODE_ENV]}/storage/${this.props.filename}`}>\n                <img\n                    src={`data:image/png;base64,${this.props.image}`}\n                    alt=\"sending\"\n                />\n            </a>\n            {this.renderTime()}\n        </div>,\n        'file': (messageType) => <div className={messageType}>\n            <a\n                href={this.createFile()}\n                download={this.props.name}\n                className=\"file-download\"\n            >Документ</a>\n            <div className=\"file-size\">{`${this.props.file.byteLength} байт`}</div>\n            {this.renderTime()}\n        </div>,\n        'audio': (messageType) => <div className={messageType}>\n            <audio controls className=\"voice-msg\">\n                <source src={this.createFile()} type={this.props.mime} />\n            </audio>\n            {this.renderTime()}\n        </div>,\n        'keyboard': (messageType) => <div className={messageType}>\n            {this.renderButtons()}\n            {this.renderTime()}\n        </div>,\n    };\n\n    render() {\n        const messageType = classNames({\n            'message-box': !this.props.buttons,\n            'buttons-box': this.props.buttons,\n            'outgoing': this.props.type === 'outgoing',\n            'incoming': this.props.type === 'incoming',\n            'image': this.props.form === 'image'\n        });\n\n        return this.renderMessage[this.props.form](messageType);\n    };\n}\n\nexport default Message;\n","const cases = {\n    'component-outgoing-message': function (wmsg) {\n        return {\n            text: wmsg.text,\n            type: 'incoming',\n            form: 'message',\n            time: new Date()\n        };\n    },\n    'component-ingoing-message': function (wmsg) {\n        return {\n            text: wmsg.text,\n            type: 'outgoing',\n            form: 'message',\n            time: new Date()\n        };\n    },\n    'component-keyboard': function (wmsg) {\n        return {\n            buttons: wmsg.buttons,\n            type: 'incoming',\n            form: 'keyboard',\n            time: new Date()\n        };\n    },\n    'component-outgoing-picture': function (wmsg) {\n        return {\n            image: wmsg.image,\n            filename: wmsg.filename,\n            type: 'incoming',\n            form: 'image',\n            time: new Date()\n        };\n    },\n    'component-ingoing-picture': function (wmsg) {\n        return {\n            image: wmsg.image,\n            filename: wmsg.filename,\n            type: 'outgoing',\n            form: 'image',\n            time: new Date()\n        };\n    },\n    'component-outgoing-audio': function (wmsg) {\n        return {\n            file: wmsg.file,\n            mime: wmsg.mime,\n            type: 'incoming',\n            form: 'audio',\n            time: new Date()\n        };\n    },\n    'component-outgoing-document': function (wmsg) {\n        return {\n            file: wmsg.file,\n            name: wmsg.name,\n            type: 'incoming',\n            form: 'file',\n            time: new Date()\n        };\n    },\n    'component-ingoing-document': function (wmsg) {\n        return {\n            file: wmsg.file,\n            name: wmsg.name,\n            type: 'outgoing',\n            form: 'file',\n            time: new Date()\n        };\n    },\n    'default': function (wmsg) {\n        return {\n            text: wmsg.text || 'Error message!',\n            type: 'incoming',\n            form: 'message',\n            time: new Date()\n        };\n    }\n}\n\n\nexport default function (wmsg) {\n    let result = {};\n    if (wmsg.type in cases) {\n        result = cases[wmsg.type](wmsg);\n    } else {\n        result = cases['default'](wmsg);\n    };\n    return result;\n};","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport classNames from 'classnames';\nimport './App.css';\nimport Message from './Message';\nimport wmsgParser from './socket';\nimport config from './config/config.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            botId: '',\n            userId: crypto.getRandomValues(new Uint32Array(1)).toString() + '-' + new Date().getTime().toString(),\n            text: '',\n            box: [],\n            botIsActive: false,\n            isIdInPath: false,\n            infoMessage: 'Введите ID бота и нажмите на кнопку для начала общения с ним.'\n        };\n\n        const url = config.urlWs[process.env.NODE_ENV];\n        this.socket = io(url, {\n            path: '/ws', transports: ['websocket']\n        });\n\n        this.socket.on('web-bot-message', (wmsg) => {\n            const result = wmsgParser(wmsg);\n\n            if (!(result.text === \"/start\" && result.type === \"outgoing\")) {\n                this.setState({\n                    box: this.state.box.concat(result)\n                })\n            }\n        });\n\n        this.socket.on('web-bot-error', (wmsg) => {\n            console.log(wmsg)\n        });\n    };\n\n    componentDidMount() {\n        let botId = window.location.pathname.slice(1);\n        if (botId) {\n            this.setState({\n                botId: botId,\n                isIdInPath: true,\n                infoMessage: 'Нажмите на кнопку для начала общения с ботом.'\n            }, () => {\n                if(window.location.hash === \"#start\"){\n                    this.startChat();\n                }\n                    \n            });\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.box.length !== prevState.box.length) {\n            this.scrollToBottom();\n        };\n    };\n\n    componentWillUnmount() {\n        this.socket.close();\n    };\n\n    scrollToBottom = () => {\n        if (this.chatbox) {\n            this.chatbox.scrollTop = this.chatbox.scrollHeight;\n        };\n    };\n\n    changeMessage = (event) => {\n        this.setState({\n            text: event.target.value\n        })\n    };\n\n    sendMessage = (event, answer) => {\n        event.preventDefault();\n        event.stopPropagation();\n        if (!this.state.botIsActive) return;\n\n        let message = {\n            bot: {\n                type: config.bot.type,\n                id: this.state.botId\n            },\n            user: this.state.userId,\n            type: 'message',\n            text: answer || this.state.text\n        };\n        this.socket.emit('web-chat', message);\n        if (!answer) {\n            this.setState({\n                text: ''\n            })\n        };\n        this.chat.disabled = false;\n        this.chat.focus();\n    };\n\n    startChat = (event) => {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n\n        this.socket.emit('web-chat', {\n            bot: {\n                type: config.bot.type,\n                id: this.state.botId\n            },\n            user: this.state.userId,\n            text: '/start',\n            type: 'message'\n        });\n        this.setState({\n            botIsActive: true\n        })\n        this.chat.disabled = false;\n        this.chat.focus();\n    };\n\n    loadImage = (event) => {\n        if (!this.state.botIsActive) {\n            return;\n        };\n\n        const files = event.target.files,\n            filename = files[0].name,\n            file = files[0];\n        if (FileReader && files && files.length) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                let message = {\n                    bot: {\n                        type: config.bot.type,\n                        id: this.state.botId\n                    },\n                    user: this.state.userId,\n                    image: reader.result.split(',')[1],\n                    filename: filename,\n                    type: 'picture'\n                };\n                this.socket.emit('web-chat', message);\n            };\n\n            reader.readAsDataURL(file);\n            event.target.value = '';\n            this.chat.focus();\n        } else {\n            alert('Error!')\n        };\n    };\n\n    loadDoc = (event) => {\n        if (!this.state.botIsActive) {\n            return;\n        };\n\n        const files = event.target.files,\n            filename = files[0].name,\n            file = files[0];\n        if (FileReader && files && files.length) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                let message = {\n                    bot: {\n                        type: config.bot.type,\n                        id: this.state.botId\n                    },\n                    user: this.state.userId,\n                    file: reader.result.split(',')[1],\n                    filename: filename,\n                    type: 'file'\n                };\n                this.socket.emit('web-chat', message);\n            };\n\n            reader.readAsDataURL(file);\n            event.target.value = '';\n            this.chat.focus();\n        } else {\n            alert('Error!')\n        };\n    };\n\n    renderMessage = () => {\n        return this.state.box.map((elem, id) => <Message sendMessage={this.sendMessage} key={id} {...elem} />)\n    };\n\n    renderInitButton = () => {\n        if (!this.state.botIsActive) return <div className=\"init-bot-btn\">\n            <button onClick={this.startChat} className=\"start-chat-btn\">\n                <i className=\"zmdi zmdi-arrow-right\"></i>\n            </button>\n            <div className=\"start-chat-info\">{this.state.infoMessage}</div>\n        </div>\n    };\n\n    renderInput = () => {\n        const blockerStyles = classNames({\n            'blocker-hide': this.state.botIsActive,\n            'blocker': true\n        });\n\n        return <form className=\"send-message-form\" onSubmit={this.sendMessage}>\n            <div className={blockerStyles}></div>\n            <label htmlFor=\"select-image\" className=\"custom-select-input-image\">\n                <i className=\"zmdi zmdi-camera-add\"></i>\n            </label>\n            <input\n                type=\"file\"\n                id=\"select-image\"\n                accept=\"image/*\"\n                onChange={this.loadImage}\n                disabled={!this.state.botIsActive}\n            />\n            <label htmlFor=\"select-doc\" className=\"custom-select-input-doc\">\n                <i className=\"zmdi zmdi-attachment-alt\"></i>\n            </label>\n            <input\n                type=\"file\"\n                id=\"select-doc\"\n                onChange={this.loadDoc}\n                disabled={!this.state.botIsActive}\n            />\n            <input\n                ref={ref => this.chat = ref}\n                className=\"message-input\"\n                value={this.state.text}\n                onChange={this.changeMessage}\n                type=\"text\"\n                placeholder=\"Введите сообщение...\"\n                disabled={!this.state.botIsActive}\n            />\n            <div className=\"send-message-button\" onClick={this.sendMessage}>\n                <i className=\"zmdi zmdi-mail-send\"></i>\n            </div>\n        </form>\n    };\n    render() {\n        let form =\n            <form className=\"bot-connection-container\" onSubmit={this.startChat} autoComplete=\"off\">\n                <label htmlFor=\"bot-id-input\">ID Бота: </label>\n                <input\n                    autoFocus\n                    type=\"text\"\n                    id=\"bot-id-input\"\n                    placeholder=\"Введите ID\"\n                    value={this.state.botId}\n                    onChange={(event) => { this.setState({ botId: event.target.value }) }}\n                />\n            </form>;\n\n        if (this.state.isIdInPath) {\n            form =\n                <form className=\"bot-connection-container\">\n                    <label htmlFor=\"bot-id-input\">ID Бота: </label>\n                    <span>{this.state.botId}</span>\n                </form>;\n        }\n\n        return (\n            <div className=\"chat-container\">\n                {form}\n                <div className=\"message-container\" ref={ref => { this.chatbox = ref }}>\n                    <div className=\"scroll-fix\"></div>\n                    {this.renderInitButton()}\n                    {this.renderMessage()}\n                </div>\n                {this.renderInput()}\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}