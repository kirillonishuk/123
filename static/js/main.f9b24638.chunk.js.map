{"version":3,"sources":["Message.jsx","socket.js","App.js","serviceWorker.js","index.js"],"names":["Message","createFile","console","log","_this","props","file","byteLength","Blob","type","mime","lookup","name","split","URL","createObjectURL","renderMessage","message","messageType","react_default","a","createElement","className","text","image","src","concat","alt","href","download","classNames","outgoing","this","incoming","form","message-box","Component","cases","component-outgoing-message","wmsg","component-keyboard","variants","buttons","forEach","elem","id","array","length","component-outgoing-picture","filename","component-outgoing-document","default","socket","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatbox","scrollTop","scrollHeight","changeMessage","event","setState","target","value","sendMessage","preventDefault","bot","config","state","botId","user","userId","objectSpread","prevState","box","emit","map","src_Message_0","assign","key","startChat","loadImage","files","FileReader","reader","onload","result","readAsDataURL","chat","focus","alert","Date","getTime","Math","floor","random","io","path","transports","on","wmsgParser","prevProps","_this2","Fragment","htmlFor","onChange","ref","onSubmit","autoFocus","placeholder","accept","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6ZA+CeA,6MAvCXC,WAAa,WACTC,QAAQC,IAAIC,EAAKC,MAAMC,KAAKC,YAC5B,IAAMD,EAAO,IAAIE,KAAK,CAACJ,EAAKC,MAAMC,MAAO,CAAEG,KAAMC,IAAKC,OAAOP,EAAKC,MAAMO,KAAKC,MAAM,KAAK,MAGxF,OAFAX,QAAQC,IAAIG,GAELQ,IAAIC,gBAAgBT,MAG/BU,cAAgB,CACZC,QAAW,SAACC,GAAD,OAAiBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,GACvCd,EAAKC,MAAMkB,OAEhBC,MAAS,SAACN,GAAD,OAAiBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,GACtCC,EAAAC,EAAAC,cAAA,OACII,IAAG,yBAAAC,OAA2BtB,EAAKC,MAAMmB,OACzCG,IAAI,cAGZrB,KAAQ,SAACY,GAAD,OAAiBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,GACrCC,EAAAC,EAAAC,cAAA,KACIO,KAAMxB,EAAKH,aACX4B,SAAUzB,EAAKC,MAAMO,KACrBU,UAAU,iBACZlB,EAAKC,MAAMO,MACbO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,GAAAI,OAA+BtB,EAAKC,MAAMC,KAAKC,WAA/C,yGAIJ,IAAMW,EAAcY,IAAW,CAC3BC,SAAgC,aAApBC,KAAK3B,MAAMI,KACvBwB,SAAgC,aAApBD,KAAK3B,MAAMI,KACvBe,MAA6B,UAApBQ,KAAK3B,MAAM6B,KACpBC,eAAe,IAGnB,OAAOH,KAAKhB,cAAcgB,KAAK3B,MAAM6B,MAAMhB,UArC7BkB,8BCNhBC,EAAQ,CACVC,6BAA8B,SAAUC,GACpC,MAAO,CACHhB,KAAMgB,EAAKhB,KACXd,KAAM,WACNyB,KAAM,YAGdM,qBAAsB,SAAUD,GAC5B,IAAIE,EAAW,GAMf,OALAF,EAAKG,QAAQC,QAAQ,SAACC,EAAMC,EAAIC,GACxBD,IAAOC,EAAMC,OAAS,EACtBN,GAAQ,GAAAf,OAAOkB,EAAKrB,KAAZ,KACPkB,GAAYG,EAAKrB,OAEnB,CACHA,KAAI,0FAAAG,OAAsBe,GAC1BhC,KAAM,WACNyB,KAAM,YAGdc,6BAA8B,SAAUT,GACpC,MAAO,CACHf,MAAOe,EAAKf,MACZyB,SAAUV,EAAKU,SACfxC,KAAM,WACNyB,KAAM,UAGdgB,8BAA+B,SAAUX,GACrC,MAAO,CACHjC,KAAMiC,EAAKjC,KACXM,KAAM2B,EAAK3B,KACXH,KAAM,WACNyB,KAAM,SAGdiB,QAAW,SAAUZ,GACjB,MAAO,CACHhB,KAAMgB,EAAKhB,MAAQ,iBACnBd,KAAM,WACNyB,KAAM,aAMHkB,EAAA,SAAUb,GAOrB,OALIA,EAAK9B,QAAQ4B,EACJA,EAAME,EAAK9B,MAAM8B,GAEjBF,EAAK,QAAYE,YCkInBc,cA7KX,SAAAA,EAAYhD,GAAO,IAAAD,EAAA,OAAAkD,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACfjD,EAAAkD,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,KAAM3B,KA6BVsD,eAAiB,WACTvD,EAAKwD,UACLxD,EAAKwD,QAAQC,UAAYzD,EAAKwD,QAAQE,eAhC3B1D,EAoCnB2D,cAAgB,SAACC,GACb5D,EAAK6D,SAAS,CACV1C,KAAMyC,EAAME,OAAOC,SAtCR/D,EA0CnBgE,YAAc,SAACJ,GACXA,EAAMK,iBACN,IAAIpD,EAAU,CACVqD,IAAK,CACD7D,KAAM8D,EAAOD,IAAI7D,KACjBoC,GAAIzC,EAAKoE,MAAMC,OAEnBC,KAAMtE,EAAKoE,MAAMG,QAEjBvE,EAAKoE,MAAMjD,OACXN,EAAOqC,OAAAsB,EAAA,EAAAtB,CAAA,GACArC,EADA,CAEHR,KAAM,UACNc,KAAMnB,EAAKoE,MAAMjD,OAGrBnB,EAAK6D,SAAS,SAACY,GACX,MAAO,CACHtD,KAAM,GACNuD,IAAKD,EAAUC,IAAIpD,OAAO,CACtBH,KAAMsD,EAAUtD,KAChBd,KAAM,WACNyB,KAAM,gBAKlB9B,EAAKoE,MAAMhD,QACXP,EAAOqC,OAAAsB,EAAA,EAAAtB,CAAA,GACArC,EADA,CAEHO,MAAOpB,EAAKoE,MAAMhD,MAAMX,MAAM,KAAK,GACnCoC,SAAU7C,EAAKoE,MAAMvB,SACrBxC,KAAM,YAGVL,EAAK6D,SAAS,SAACY,GACX,MAAO,CACHrD,MAAO,GACPyB,SAAU,GACV6B,IAAKD,EAAUC,IAAIpD,OAAO,CACtBF,MAAOqD,EAAUrD,MAAMX,MAAM,KAAK,GAClCJ,KAAM,WACNyB,KAAM,cAKlBjB,EAAQR,MACRL,EAAKgD,OAAO2B,KAAK,WAAY9D,IA1FlBb,EA6FnBY,cAAgB,WACZ,OAAOZ,EAAKoE,MAAMM,IAAIE,IAAI,SAACpC,EAAMC,GAAP,OAAc1B,EAAAC,EAAAC,cAAC4D,EAAD3B,OAAA4B,OAAA,CAASC,IAAKtC,GAAQD,OA9F/CxC,EAiGnBgF,UAAY,WACRhF,EAAKgD,OAAO2B,KAAK,WAAY,CACzBT,IAAK,CACD7D,KAAM8D,EAAOD,IAAI7D,KACjBoC,GAAIzC,EAAKoE,MAAMC,OAEnBC,KAAMtE,EAAKoE,MAAMG,OACjBpD,KAAM,SACNd,KAAM,aAzGKL,EA6GnBiF,UAAY,SAACrB,GACT,IAAMsB,EAAQtB,EAAME,OAAOoB,MAE3B,GAAIC,YAAcD,GAASA,EAAMvC,OAAQ,CACrC,IAAMyC,EAAS,IAAID,WACnBC,EAAOC,OAAS,WACZrF,EAAK6D,SAAS,CACVzC,MAAOgE,EAAOE,OACdzC,cAGR,IAAMA,EAAWqC,EAAM,GAAG1E,KACtBN,EAAOgF,EAAM,GACjBE,EAAOG,cAAcrF,GACrB0D,EAAME,OAAOoB,MAAQ,KACrBlF,EAAKwF,KAAKC,aAEVC,MAAM,WA3HV1F,EAAKoE,MAAQ,CACTC,MAAO,GACPE,QAAQ,IAAIoB,MAAOC,UAAYC,KAAKC,MAAsB,IAAhBD,KAAKE,SAAiB,GAChE5E,KAAM,GACNuD,IAAK,GACLtD,MAAO,GACPyB,SAAU,IAGd7C,EAAKgD,OAASgD,IAAG,uBAAwB,CACrCC,KAAM,MAAOC,WAAY,CAAC,eAE9BlG,EAAKgD,OAAOmD,GAAG,kBAAmB,SAAChE,GAC/B,IAAMmD,EAASc,EAAWjE,GAE1BnC,EAAK6D,SAAS,CACVa,IAAK1E,EAAKoE,MAAMM,IAAIpD,OAAOgE,OAnBpBtF,kFAwBAqG,EAAW5B,GACtB7C,KAAKwC,MAAMM,IAAI/B,SAAW8B,EAAUC,IAAI/B,QACxCf,KAAK2B,kDAwGJ,IAAA+C,EAAA1E,KACL,OACIb,EAAAC,EAAAC,cAACF,EAAAC,EAAMuF,SAAP,KACIxF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,SAAOuF,QAAQ,UAAf,WACAzF,EAAAC,EAAAC,cAAA,SACIZ,KAAK,OACLoC,GAAG,SACHsB,MAAOnC,KAAKwC,MAAMC,MAClBoC,SAAU,SAAC7C,GAAY0C,EAAKzC,SAAS,CAAEQ,MAAOT,EAAME,OAAOC,YAGnEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MAAMwF,IAAK,SAAAA,GAASJ,EAAK9C,QAAUkD,IAC7C9E,KAAKhB,iBAERgB,KAAKwC,MAAMM,IAAI/B,OAMb5B,EAAAC,EAAAC,cAAA,QAAM0F,SAAU/E,KAAKoC,aACjBjD,EAAAC,EAAAC,cAAA,SACIyF,IAAK,SAAAA,GAAG,OAAIJ,EAAKd,KAAOkB,GACxBE,WAAS,EACT1F,UAAU,uBACV6C,MAAOnC,KAAKwC,MAAMjD,KAClBsF,SAAU7E,KAAK+B,cACftD,KAAK,OACLwG,YAAY,yGAEhB9F,EAAAC,EAAAC,cAAA,SAAOuF,QAAQ,cAActF,UAAU,sBACvCH,EAAAC,EAAAC,cAAA,SAAOZ,KAAK,OAAOoC,GAAG,cAAcqE,OAAO,UAAUL,SAAU7E,KAAKqD,aAhBxElE,EAAAC,EAAAC,cAAA,UACIC,UAAU,4BACV6F,QAASnF,KAAKoD,WAFlB,SAkBHpD,KAAKwC,MAAMhD,MACRL,EAAAC,EAAAC,cAAA,OAAKI,IAAKO,KAAKwC,MAAMhD,MAAOF,UAAU,iBAAiBK,IAAI,aAE3D,aAzKFS,aCKEgF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvG,EAAAC,EAAAC,cAACsG,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f9b24638.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Message.css';\nimport classNames from 'classnames';\nimport mime from 'mime-types';\n\n\nclass Message extends Component {\n\n    createFile = () => {\n        console.log(this.props.file.byteLength);\n        const file = new Blob([this.props.file], { type: mime.lookup(this.props.name.split('.')[1]) });\n        console.log(file);\n\n        return URL.createObjectURL(file)\n    }\n\n    renderMessage = {\n        'message': (messageType) => <div className={messageType}>\n            {this.props.text}\n        </div>,\n        'image': (messageType) => <div className={messageType}>\n            <img\n                src={`data:image/png;base64,${this.props.image}`}\n                alt=\"sending\"\n            />\n        </div>,\n        'file': (messageType) => <div className={messageType}>\n            <a\n                href={this.createFile()}\n                download={this.props.name}\n                className=\"file-download\"\n            >{this.props.name}</a>\n            <div className=\"file-size\">{`${this.props.file.byteLength} байт`}</div>\n        </div>,\n    }\n    render() {\n        const messageType = classNames({\n            'outgoing': this.props.type === 'outgoing',\n            'incoming': this.props.type === 'incoming',\n            'image': this.props.form === 'image',\n            'message-box': true\n        });\n\n        return this.renderMessage[this.props.form](messageType);\n    };\n}\n\nexport default Message;\n","const cases = {\n    'component-outgoing-message': function (wmsg) {\n        return {\n            text: wmsg.text,\n            type: 'incoming',\n            form: 'message'\n        }\n    },\n    'component-keyboard': function (wmsg) {\n        let variants = '';\n        wmsg.buttons.forEach((elem, id, array) => {\n            if (id !== array.length - 1)\n                variants += `${elem.text}/`;\n            else variants += elem.text;\n        });\n        return {\n            text: `Варианты ответа: ${variants}`,\n            type: 'incoming',\n            form: 'message'\n        };\n    },\n    'component-outgoing-picture': function (wmsg) {\n        return {\n            image: wmsg.image,\n            filename: wmsg.filename,\n            type: 'incoming',\n            form: 'image'\n        }\n    },\n    'component-outgoing-document': function (wmsg) {\n        return {\n            file: wmsg.file,\n            name: wmsg.name,\n            type: 'incoming',\n            form: 'file'\n        }\n    },\n    'default': function (wmsg) {\n        return {\n            text: wmsg.text || 'Error message!',\n            type: 'incoming',\n            form: 'message'\n        }\n    }\n}\n\n\nexport default function (wmsg) {\n    let result = {};\n    if (wmsg.type in cases) {\n        result = cases[wmsg.type](wmsg);\n    } else {\n        result = cases['default'](wmsg);\n    };\n    return result;\n};","import React, { Component } from 'react';\nimport './App.css';\nimport Message from './Message';\nimport io from 'socket.io-client';\nimport wmsgParser from './socket';\nimport config from './config/config.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            botId: '',\n            userId: new Date().getTime() * Math.floor(Math.random() * 999 + 1),\n            text: \"\",\n            box: [],\n            image: '',\n            filename: ''\n        };\n\n        this.socket = io('wss://193.124.114.63:3015', {\n            path: '/ws', transports: ['websocket']\n        })\n        this.socket.on('web-bot-message', (wmsg) => {\n            const result = wmsgParser(wmsg);\n\n            this.setState({\n                box: this.state.box.concat(result)\n            })\n        })\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.box.length !== prevState.box.length) {\n            this.scrollToBottom();\n        };\n    };\n\n    scrollToBottom = () => {\n        if (this.chatbox) {\n            this.chatbox.scrollTop = this.chatbox.scrollHeight;\n        };\n    };\n\n    changeMessage = (event) => {\n        this.setState({\n            text: event.target.value\n        })\n    };\n\n    sendMessage = (event) => {\n        event.preventDefault();\n        let message = {\n            bot: {\n                type: config.bot.type,\n                id: this.state.botId\n            },\n            user: this.state.userId\n        };\n        if (this.state.text) {\n            message = {\n                ...message,\n                type: 'message',\n                text: this.state.text\n            };\n\n            this.setState((prevState) => {\n                return {\n                    text: '',\n                    box: prevState.box.concat({\n                        text: prevState.text,\n                        type: 'outgoing',\n                        form: 'message'\n                    })\n                }\n            })\n        };\n        if (this.state.image) {\n            message = {\n                ...message,\n                image: this.state.image.split(',')[1],\n                filename: this.state.filename,\n                type: 'picture'\n            };\n\n            this.setState((prevState) => {\n                return {\n                    image: '',\n                    filename: '',\n                    box: prevState.box.concat({\n                        image: prevState.image.split(',')[1],\n                        type: 'outgoing',\n                        form: 'image'\n                    })\n                }\n            });\n        };\n        if (message.type)\n            this.socket.emit('web-chat', message);\n    }\n\n    renderMessage = () => {\n        return this.state.box.map((elem, id) => <Message key={id} {...elem} />)\n    }\n\n    startChat = () => {\n        this.socket.emit('web-chat', {\n            bot: {\n                type: config.bot.type,\n                id: this.state.botId\n            },\n            user: this.state.userId,\n            text: '/start',\n            type: 'message'\n        })\n    }\n\n    loadImage = (event) => {\n        const files = event.target.files;\n\n        if (FileReader && files && files.length) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                this.setState({\n                    image: reader.result,\n                    filename,\n                });\n            };\n            const filename = files[0].name,\n                file = files[0];\n            reader.readAsDataURL(file);\n            event.target.files = null;\n            this.chat.focus();\n        } else {\n            alert('Error!')\n        };\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"bot-connection\">\n                    <label htmlFor=\"bot-id\">Bot:ID </label>\n                    <input\n                        type=\"text\"\n                        id=\"bot-id\"\n                        value={this.state.botId}\n                        onChange={(event) => { this.setState({ botId: event.target.value }) }}\n                    />\n                </div>\n                <div className=\"App\" ref={ref => { this.chatbox = ref }}>\n                    {this.renderMessage()}\n                </div>\n                {!this.state.box.length ?\n                    <button\n                        className=\"chat-input start-chat-btn\"\n                        onClick={this.startChat}\n                    >Start</button>\n                    :\n                    <form onSubmit={this.sendMessage}>\n                        <input\n                            ref={ref => this.chat = ref}\n                            autoFocus\n                            className=\"chat-input App-input\"\n                            value={this.state.text}\n                            onChange={this.changeMessage}\n                            type=\"text\"\n                            placeholder=\"Введите сообщение...\"\n                        />\n                        <label htmlFor=\"select-file\" className=\"custom-input-file\"></label>\n                        <input type=\"file\" id=\"select-file\" accept=\"image/*\" onChange={this.loadImage} />\n                    </form>}\n                {this.state.image ?\n                    <img src={this.state.image} className=\"selected-image\" alt=\"selected\" />\n                    :\n                    null}\n            </React.Fragment>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
