{"version":3,"sources":["Message.jsx","socket.js","App.js","serviceWorker.js","index.js"],"names":["Message","createFile","file","Blob","_this","props","type","mime","lookup","name","split","URL","createObjectURL","renderButtons","buttons","map","button","id","react_default","a","createElement","className","key","onClick","event","sendMessage","text","linkify","replace","renderTime","time","getHours","getMinutes","renderMessage","message","messageType","dangerouslySetInnerHTML","__html","image","src","concat","alt","href","download","byteLength","audio","controls","keyboard","classNames","message-box","this","buttons-box","outgoing","incoming","form","Component","cases","component-outgoing-message","wmsg","Date","component-ingoing-message","component-keyboard","component-outgoing-picture","filename","component-ingoing-picture","component-outgoing-audio","component-outgoing-document","default","socket","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","scrollToBottom","chatbox","scrollTop","scrollHeight","changeMessage","setState","target","value","answer","preventDefault","stopPropagation","bot","config","state","botId","user","userId","emit","chat","disabled","focus","startChat","botIsActive","loadImage","files","FileReader","length","reader","onload","result","readAsDataURL","alert","box","elem","src_Message_0","assign","renderInitButton","renderInput","blockerStyles","blocker-hide","blocker","onSubmit","htmlFor","accept","onChange","ref","placeholder","crypto","getRandomValues","Uint32Array","toString","getTime","url","prod","io","path","transports","on","wmsgParser","prevProps","prevState","close","_this2","autoComplete","autoFocus","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ef38249.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Message.css';\nimport classNames from 'classnames';\nimport mime from 'mime-types';\n\n\nclass Message extends Component {\n\n    createFile = () => {\n        const file = new Blob([this.props.file], { type: this.props.mime || mime.lookup(this.props.name.split('.')[1]) });\n\n        return URL.createObjectURL(file)\n    };\n\n    renderButtons = () => {\n        return this.props.buttons.map((button, id) =>\n            <div className=\"answer-button\" key={id} onClick={(event) => this.props.sendMessage(event, button.text)}>\n                {button.text}\n            </div>\n        )\n    };\n\n    linkify = (text) => {\n        // http://, https://, ftp://\n        const urlPattern = /\\b(?:https?|ftp):\\/\\/[a-z0-9-+&@#\\/%?=~_|!:,.;]*[a-z0-9-+&@#\\/%=~_|]/gim;\n        // www. sans http:// or https://\n        const pseudoUrlPattern = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        // Email addresses\n        const emailAddressPattern = /[\\w.]+@[a-zA-Z_-]+?(?:\\.[a-zA-Z]{2,6})+/gim;\n\n        return text\n            .replace(urlPattern, '<a href=\"$&\" target=\"_blank\">$&</a>')\n            .replace(pseudoUrlPattern, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>')\n            .replace(emailAddressPattern, '<a href=\"mailto:$&\" target=\"_blank\">$&</a>');\n    }\n\n    renderTime = () => <div className=\"message-time\">{this.props.time.getHours() + ':' + this.props.time.getMinutes()}</div>\n\n    renderMessage = {\n        'message': (messageType) => <div className={messageType}>\n            <span dangerouslySetInnerHTML={{ __html: this.linkify(this.props.text) }}></span>\n            {this.renderTime()}\n        </div>,\n        'image': (messageType) => <div className={messageType}>\n            <img\n                src={`data:image/png;base64,${this.props.image}`}\n                alt=\"sending\"\n            />\n            {this.renderTime()}\n        </div>,\n        'file': (messageType) => <div className={messageType}>\n            <a\n                href={this.createFile()}\n                download={this.props.name}\n                className=\"file-download\"\n            >{this.props.name}</a>\n            <div className=\"file-size\">{`${this.props.file.byteLength} байт`}</div>\n            {this.renderTime()}\n        </div>,\n        'audio': (messageType) => <div className={messageType}>\n            <audio controls className=\"voice-msg\">\n                <source src={this.createFile()} type={this.props.mime} />\n            </audio>\n            {this.renderTime()}\n        </div>,\n        'keyboard': (messageType) => <div className={messageType}>\n            {this.renderButtons()}\n            {this.renderTime()}\n        </div>,\n    };\n\n    render() {\n        const messageType = classNames({\n            'message-box': !this.props.buttons,\n            'buttons-box': this.props.buttons,\n            'outgoing': this.props.type === 'outgoing',\n            'incoming': this.props.type === 'incoming',\n            'image': this.props.form === 'image'\n        });\n\n        return this.renderMessage[this.props.form](messageType);\n    };\n}\n\nexport default Message;\n","const cases = {\n    'component-outgoing-message': function (wmsg) {\n        return {\n            text: wmsg.text,\n            type: 'incoming',\n            form: 'message',\n            time: new Date()\n        };\n    },\n    'component-ingoing-message': function (wmsg) {\n        return {\n            text: wmsg.text,\n            type: 'outgoing',\n            form: 'message',\n            time: new Date()\n        };\n    },\n    'component-keyboard': function (wmsg) {\n        return {\n            buttons: wmsg.buttons,\n            type: 'incoming',\n            form: 'keyboard',\n            time: new Date()\n        };\n    },\n    'component-outgoing-picture': function (wmsg) {\n        return {\n            image: wmsg.image,\n            filename: wmsg.filename,\n            type: 'incoming',\n            form: 'image',\n            time: new Date()\n        };\n    },\n    'component-ingoing-picture': function (wmsg) {\n        return {\n            image: wmsg.image,\n            filename: wmsg.filename,\n            type: 'outgoing',\n            form: 'image',\n            time: new Date()\n        };\n    },\n    'component-outgoing-audio': function (wmsg) {\n        return {\n            file: wmsg.file,\n            mime: wmsg.mime,\n            type: 'incoming',\n            form: 'audio',\n            time: new Date()\n        };\n    },\n    'component-outgoing-document': function (wmsg) {\n        return {\n            file: wmsg.file,\n            name: wmsg.name,\n            type: 'incoming',\n            form: 'file',\n            time: new Date()\n        };\n    },\n    'default': function (wmsg) {\n        return {\n            text: wmsg.text || 'Error message!',\n            type: 'incoming',\n            form: 'message',\n            time: new Date()\n        };\n    }\n}\n\n\nexport default function (wmsg) {\n    let result = {};\n    if (wmsg.type in cases) {\n        result = cases[wmsg.type](wmsg);\n    } else {\n        result = cases['default'](wmsg);\n    };\n    return result;\n};","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport classNames from 'classnames';\nimport './App.css';\nimport Message from './Message';\nimport wmsgParser from './socket';\nimport config from './config/config.json';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            botId: '',\n            userId: crypto.getRandomValues(new Uint32Array(1)).toString() + '-' + new Date().getTime().toString(),\n            text: '',\n            box: [],\n            botIsActive: false\n        };\n\n        const url = process.env.NODE_ENV === \"development\" ? config.url.dev : config.url.prod;\n        this.socket = io(url, {\n            path: '/ws', transports: ['websocket']\n        });\n\n        this.socket.on('web-bot-message', (wmsg) => {\n            const result = wmsgParser(wmsg);\n\n            this.setState({\n                box: this.state.box.concat(result)\n            })\n        });\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.box.length !== prevState.box.length) {\n            this.scrollToBottom();\n        };\n    };\n\n    componentWillUnmount() {\n        this.socket.close();\n    };\n\n    scrollToBottom = () => {\n        if (this.chatbox) {\n            this.chatbox.scrollTop = this.chatbox.scrollHeight;\n        };\n    };\n\n    changeMessage = (event) => {\n        this.setState({\n            text: event.target.value\n        })\n    };\n\n    sendMessage = (event, answer) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        let message = {\n            bot: {\n                type: config.bot.type,\n                id: this.state.botId\n            },\n            user: this.state.userId,\n            type: 'message',\n            text: answer || this.state.text\n        };\n        this.socket.emit('web-chat', message);\n        if (!answer) {\n            this.setState({\n                text: ''\n            })\n        };\n        this.chat.disabled = false;\n        this.chat.focus();\n    };\n\n    startChat = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.socket.emit('web-chat', {\n            bot: {\n                type: config.bot.type,\n                id: this.state.botId\n            },\n            user: this.state.userId,\n            text: '/start',\n            type: 'message'\n        });\n        this.setState({\n            botIsActive: true\n        })\n        this.chat.disabled = false;\n        this.chat.focus();\n    };\n\n    loadImage = (event) => {\n        const files = event.target.files,\n            filename = files[0].name,\n            file = files[0];\n        if (FileReader && files && files.length) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                let message = {\n                    bot: {\n                        type: config.bot.type,\n                        id: this.state.botId\n                    },\n                    user: this.state.userId,\n                    image: reader.result.split(',')[1],\n                    filename: filename,\n                    type: 'picture'\n                };\n                this.socket.emit('web-chat', message);\n            };\n\n            reader.readAsDataURL(file);\n            event.target.value = '';\n            this.chat.focus();\n        } else {\n            alert('Error!')\n        };\n    };\n\n    renderMessage = () => {\n        return this.state.box.map((elem, id) => <Message sendMessage={this.sendMessage} key={id} {...elem} />)\n    };\n\n    renderInitButton = () => {\n        if (!this.state.botIsActive) return <div className=\"init-bot-btn\">\n            <button onClick={this.startChat} className=\"start-chat-btn\">\n                <i className=\"zmdi zmdi-arrow-right\"></i>\n            </button>\n            <div className=\"start-chat-info\">Введите ID бота и нажмите на кнопку для начала общения с ним.</div>\n        </div>\n    };\n\n    renderInput = () => {\n        const blockerStyles = classNames({\n            'blocker-hide': this.state.botIsActive,\n            'blocker': true\n        });\n\n        return <form className=\"send-message-form\" onSubmit={this.sendMessage}>\n            <div className={blockerStyles}></div>\n            <label htmlFor=\"select-file\" className=\"custom-select-input-file\"></label>\n            <input\n                type=\"file\"\n                id=\"select-file\"\n                accept=\"image/*\"\n                onChange={this.loadImage}\n                disabled={!this.state.botIsActive}\n            />\n            <input\n                ref={ref => this.chat = ref}\n                className=\"message-input\"\n                value={this.state.text}\n                onChange={this.changeMessage}\n                type=\"text\"\n                placeholder=\"Введите сообщение...\"\n                disabled={!this.state.botIsActive}\n            />\n            <div className=\"send-message-button\" onClick={this.sendMessage}></div>\n        </form>\n    };\n\n    render() {\n        return (\n            <div className=\"chat-container\">\n                <form className=\"bot-connection-container\" onSubmit={this.startChat} autoComplete=\"off\">\n                    <label htmlFor=\"bot-id-input\">ID Бота: </label>\n                    <input\n                        autoFocus\n                        type=\"text\"\n                        id=\"bot-id-input\"\n                        placeholder=\"Введите ID\"\n                        value={this.state.botId}\n                        onChange={(event) => { this.setState({ botId: event.target.value }) }}\n                    />\n                </form>\n                <div className=\"message-container\" ref={ref => { this.chatbox = ref }}>\n                    <div className=\"scroll-fix\"></div>\n                    {this.renderInitButton()}\n                    {this.renderMessage()}\n                </div>\n                {this.renderInput()}\n            </div>\n        );\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}